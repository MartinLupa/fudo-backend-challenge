services:
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    environment:
      API_GATEWAY_PORT: ${API_GATEWAY_PORT}
      RATE_LIMIT_REQUESTS_PER_SECOND: ${RATE_LIMIT_REQUESTS_PER_SECOND}
      UPSTREAM_SERVER_PORT: ${SERVER_PORT}
    restart: always
    ports:
      - ${API_GATEWAY_PORT}:80

  db:
    image: postgres:15
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 1s
      timeout: 2s
      retries: 5
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    command: [ "postgres", "-c", "log_statement=all" ]

  redis:
    image: redis:7.2
    ports:
      - "6379:6379"
    command: [ "redis-server", "--loglevel", "verbose" ]
  # TODO: split Dockerfiles for app and sidekiq processes
  # app:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   command: bundle exec rackup
  #   depends_on: [ nginx, db ]
  #   ports:
  #     - "${SERVER_PORT}:3000"

  # sidekiq:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   depends_on: [ db, redis, app ]
  #   command: bundle exec sidekiq -C ./app/config/sidekiq.yaml -r ./app/workers/products_processor_worker.rb

volumes:
  postgres_data:
